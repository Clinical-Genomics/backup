#!/bin/bash
#SBATCH -t 24:00:00
#SBATCH -c 16
#SBATCH -A prod001
#SBATCH -J gpg_test
#SBATCH --output=/mnt/hds/proj/bioinfo/LOG/gpg-test-%j.out
#SBATCH --error=/mnt/hds/proj/bioinfo/LOG/gpg-test-%j.err
#SBATCH --mail-type=ALL
#SBATCH --mail-user=kenny.billiau@scilifelab.se

set -e 

#############
# FUNCTIONS #
#############

log() {
    NOW=$(date +"%Y%m%d%H%M%S")
    echo "[${NOW}] $@"
}

finish() {
    if [[ ! -z ${PASSPHRASEFILE} && -f ${PASSPHRASEFILE} ]]; then
        rm ${PASSPHRASEFILE}
    fi
}
trap finish EXIT ERR

########
# VARS #
########

IN=$1
OUTDIR=$2

INDIR=$(dirname ${IN})
RUN=$(basename ${IN})
EMAILS=kenny.billiau@scilifelab.se

########
# MAIN #
########

export TMPDIR=${INDIR}
PASSPHRASEFILE=$(mktemp)
chmod a-rwx,u+rw ${PASSPHRASEFILE}

# get the number of CPUs so pigz can use an optimized few
CPUS=$(grep -c ^processor /proc/cpuinfo)

cd ${INDIR}

# can take some time when there is not a lot of entropy
log "gpg --gen-random 1 256 > ${PASSPHRASEFILE}"
gpg --gen-random 2 256 > ${PASSPHRASEFILE}

# asymmetrically encrypt the passphrase file
log "gpg -e -r 'Kenny Billiau' -o ${PASSPHRASEFILE}.gpg ${PASSPHRASEFILE}"
gpg -e -r 'Kenny Billiau' -o ${PASSPHRASEFILE}.gpg ${PASSPHRASEFILE}
ls -l ${PASSPHRASEFILE}*

# TAR | ZIP | GPG
# We need:
# * 1 CPU for tar
# * 1 CPU for tee and md5sum
# * 1 CPU for gpg
# * remainder of CPUs can be used by pigz
PIGZCPUS=$(( ${CPUS} - 3 ))
log "time tar -cf - ${RUN} | pigz -p ${PIGZCPUS} --fast -c - | tee >(md5sum > ${OUTDIR}/${RUN}.tar.gz.md5sum) | gpg --symmetric --cipher-algo aes256 --passphrase-file ${PASSPHRASEFILE} --batch --compress-algo none -o ${OUTDIR}/${RUN}.tar.gz.gpg"
     time tar -cf - ${RUN} | pigz -p ${PIGZCPUS} --fast -c - | tee >(md5sum > ${OUTDIR}/${RUN}.tar.gz.md5sum) | gpg --symmetric --cipher-algo aes256 --passphrase-file ${PASSPHRASEFILE} --batch --compress-algo none -o ${OUTDIR}/${RUN}.tar.gz.gpg

# decrypt and compare the md5sum
log "time gpg --decrypt --cipher-algo aes256 --passphrase-file ${PASSPHRASEFILE} --batch ${OUTDIR}/${RUN}.tar.gz.gpg | md5sum > ${OUTDIR}/${RUN}.tar.gz.degpg.md5sum"
     time gpg --decrypt --cipher-algo aes256 --passphrase-file ${PASSPHRASEFILE} --batch ${OUTDIR}/${RUN}.tar.gz.gpg | md5sum > ${OUTDIR}/${RUN}.tar.gz.degpg.md5sum

log "diff -q ${OUTDIR}/${RUN}.tar.gz.md5sum ${OUTDIR}/${RUN}.tar.gz.degpg.md5sum"
     diff -q ${OUTDIR}/${RUN}.tar.gz.md5sum ${OUTDIR}/${RUN}.tar.gz.degpg.md5sum
if [[ $? -gt 0 ]]; then
    echo "md5sum failed for backup ${RUN} on ${NAS}" | mail -s "md5sum failed for backup ${RUN} on ${NAS}" ${EMAILS}
fi

############
# CLEAN UP #
############

mv ${PASSPHRASEFILE}.gpg ${OUTDIR}/${RUN}.key.gpg
rm ${PASSPHRASEFILE}
rm ${OUTDIR}/${RUN}.tar.gz.md5sum
rm ${OUTDIR}/${RUN}.tar.gz.degpg.md5sum
cd -
log "Finished"
